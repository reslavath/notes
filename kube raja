ConfigMaps and Secrets, and how to use Ingress.
developers will have a solid understanding of the origin, architecture and building blocks for Kubernetes


The origin, architecture, primary components, and building blocks of Kubernetes.
How to set up and access a Kubernetes cluster using Minikube.
Ways to run applications on the deployed Kubernetes environment, and access the deployed applications.

container runtimes like runC, containerd, or rkt we can use those pre-packaged images, to create one or more containers.



By the end of this chapter, you should be able to:

Define the concept of container orchestration.
Explain the reasons for doing container orchestration.
Discuss different container orchestration options.
Discuss different container orchestration deployment options.

With a container image, we bundle the application along with its runtime and dependencies. 


Container orchestrators are the tools which group hosts together to form a cluster, and help us fulfill the requirements
>Are fault-tolerant
>Can scale, and do this on-demand
>Use resources optimally
>Can discover other applications automatically, and communicate with each other
>Are accessible from the external world 
>Can update/rollback without any downtime. 



Docker Swarm : Docker Swarm is a container orchestrator provided by Docker, Inc. It is part of Docker Engine.
Kubernetes : Kubernetes was started by Google, but now, it is a part of the Cloud Native Computing Foundation project.
Mesos Marathon : Marathon is one of the frameworks to run containers at scale on Apache Mesos.
Amazon ECS : Amazon EC2 Container Service (ECS) is a hosted service provided by AWS to run Docker containers at scale on its infrastructrue.
Hashicorp Nomad : Nomad is the container orchestrator provided by HashiCorp.



















By the end of this chapter, you should be able to:

Define Kubernetes.
Explain the reasons for using Kubernetes.
Discuss the features of Kubernetes.
Discuss the evolution of Kubernetes from Borg.
Explain what the Cloud Native Computing Foundation does.

"Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications."


"Google's Borg system is a cluster manager that runs hundreds of thousands of jobs, from many thousands of different applications, across a number of clusters each with up to tens of thousands of machines."

Some of the features/objects of Kubernetes that can be traced back to Borg, or to lessons learnt from it, are:

API servers
Pods
IP-per-Pod
Services
Labels.

The current stable version is 1.9 

Kubernetes offers a very rich set of features for container orchestration. Some of its fully supported features are:

Automatic binpacking :  Kubernetes automatically schedules the containers based on resource usage and constraints, without sacrificing the availability.
Self-healing : Kubernetes automatically replaces and reschedules the containers from failed nodes. It also kills and restarts the containers which do not respond to health checks, based on existing rules/policy.
Horizontal scaling : Kubernetes can automatically scale applications based on resource usage like CPU and memory. In some cases, it also supports dynamic scaling based on customer metrics.
Service discovery and Load balancing : Kubernetes groups sets of containers and refers to them via a Domain Name System (DNS). This DNS is also called a Kubernetes service. Kubernetes can discover these services automatically, and load-balance requests between containers of a given service.
Automated rollouts and rollbacks : Kubernetes can roll out and roll back new versions/configurations of an application, without introducing any downtime.
Secrets and configuration management :Kubernetes can manage secrets and configuration details for an application without re-building the respective images. With secrets, we can share confidential information to our application without exposing it to the stack configuration, like on GitHub.
Storage orchestration : With Kubernetes and its plugins, we can automatically mount local, external, and storage solutions to the containers in a seamless manner, based on software-defined storage (SDS).
Batch execution : Besides long running jobs, Kubernetes also supports batch execution.



following projects were part of CNCF:

containerd for container runtime
rkt for container runtime
Kubernetes for container orchestration
Linkerd for service mesh
Envoy for service mesh
gRPC for remote procedure call (RPC)
Container Network Interface (CNI) for networking API
CoreDNS for service discovery
Rook for cloud-native storage
Notary for security
The Update Framework (TUF) for software updates
Prometheus for monitoring
OpenTracing for tracing
Jaeger for distributed tracing
Fluentd for logging
Vitess for storage.


_______________________
Kubernetes Architecture
_______________________

By the end of this chapter, you should be able to:

Discuss the Kubernetes architecture.
Explain the different components for master and worker nodes.
Discuss about cluster state management with etcd.
Review the Kubernetes network setup requirements.


A master node has the following components:
>API server
All the administrative tasks are performed via the API server within the master node. A user/operator sends REST commands to the API 
server, which then validates and processes the requests. After executing the requests, the resulting state of the cluster is stored 
in the distributed key-value store.

>Scheduler
As the name suggests, the scheduler schedules the work to different worker nodes. The scheduler has the resource usage information 
for each worker node. It also knows about the constraints that users/operators may have set, such as scheduling work on a node that
has the label disk==ssd set. Before scheduling the work, the scheduler also takes into account the quality of the service requirements, 
data locality, affinity, anti-affinity, etc. The scheduler schedules the work in terms of Pods and Services.

>Controller manager
The controller manager manages different non-terminating control loops, which regulate the state of the Kubernetes cluster. 
Each one of these control loops knows about the desired state of the objects it manages, and watches their current state through the 
API server. In a control loop, if the current state of the objects it manages does not meet the desired state, then the control loop 
takes corrective steps to make sure that the current state is the same as the desired state.


>etcd.
As discussed earlier, etcd is a distributed key-value store which is used to store the cluster state. It can be part of the Kubernetes 
Master, or, it can be configured externally, in which case, master nodes would connect to it.

WORKER NODE
-----------
A worker node is a machine (VM, physical server, etc.) which runs the applications using Pods and is controlled by the master node. 
Pods are scheduled on the worker nodes, which have the necessary tools to run and connect them. 
A Pod is the scheduling unit in Kubernetes. It is a logical collection of one or more containers which are always scheduled together. 
We will explore them further in later chapters.

 
we need a container runtime on the worker node. Some examples of container runtimes are: 
>containerd
>rkt
>lxd. 
Sometimes, Docker is also referred to as a container runtime, 
but to be precise, Docker is a platform which uses containerd as a container runtime. 

https://hackernoon.com/docker-containerd-standalone-runtimes-heres-what-you-should-know-b834ef155426
https://stackoverflow.com/questions/46649592/dockerd-vs-docker-containerd-vs-docker-runc-vs-docker-containerd-ctr-vs-docker-c


dockerd - The Docker daemon itself. The highest level component in your list and also the only 'Docker' product listed. Provides all 
the nice UX features of Docker.
(docker-)containerd - Also a daemon, listening on a Unix socket, exposes gRPC endpoints. Handles all the low-level container management 
tasks, storage, image distribution, network attachment, etc...
(docker-)containerd-ctr - A lightweight CLI to directly communicate with containerd. Think of it as how 'docker' is to 'dockerd'.
(docker-)runc - A lightweight binary for actually running containers. Deals with the low-level interfacing with Linux capabilities like cgroups, namespaces, etc...
(docker-)containerd-shim - After runC actually runs the container, it exits (allowing us to not have any long-running processes responsible for our containers). The shim is the component which sits between containerd and runc to facilitate this.









