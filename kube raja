ConfigMaps and Secrets, and how to use Ingress.
developers will have a solid understanding of the origin, architecture and building blocks for Kubernetes


The origin, architecture, primary components, and building blocks of Kubernetes.
How to set up and access a Kubernetes cluster using Minikube.
Ways to run applications on the deployed Kubernetes environment, and access the deployed applications.

container runtimes like runC, containerd, or rkt we can use those pre-packaged images, to create one or more containers.



By the end of this chapter, you should be able to:

Define the concept of container orchestration.
Explain the reasons for doing container orchestration.
Discuss different container orchestration options.
Discuss different container orchestration deployment options.

With a container image, we bundle the application along with its runtime and dependencies. 


Container orchestrators are the tools which group hosts together to form a cluster, and help us fulfill the requirements
>Are fault-tolerant
>Can scale, and do this on-demand
>Use resources optimally
>Can discover other applications automatically, and communicate with each other
>Are accessible from the external world 
>Can update/rollback without any downtime. 



Docker Swarm : Docker Swarm is a container orchestrator provided by Docker, Inc. It is part of Docker Engine.
Kubernetes : Kubernetes was started by Google, but now, it is a part of the Cloud Native Computing Foundation project.
Mesos Marathon : Marathon is one of the frameworks to run containers at scale on Apache Mesos.
Amazon ECS : Amazon EC2 Container Service (ECS) is a hosted service provided by AWS to run Docker containers at scale on its infrastructrue.
Hashicorp Nomad : Nomad is the container orchestrator provided by HashiCorp.



















By the end of this chapter, you should be able to:

Define Kubernetes.
Explain the reasons for using Kubernetes.
Discuss the features of Kubernetes.
Discuss the evolution of Kubernetes from Borg.
Explain what the Cloud Native Computing Foundation does.

"Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications."


"Google's Borg system is a cluster manager that runs hundreds of thousands of jobs, from many thousands of different applications, across a number of clusters each with up to tens of thousands of machines."

Some of the features/objects of Kubernetes that can be traced back to Borg, or to lessons learnt from it, are:

API servers
Pods
IP-per-Pod
Services
Labels.

The current stable version is 1.9 

Kubernetes offers a very rich set of features for container orchestration. Some of its fully supported features are:

Automatic binpacking :  Kubernetes automatically schedules the containers based on resource usage and constraints, without sacrificing the availability.
Self-healing : Kubernetes automatically replaces and reschedules the containers from failed nodes. It also kills and restarts the containers which do not respond to health checks, based on existing rules/policy.
Horizontal scaling : Kubernetes can automatically scale applications based on resource usage like CPU and memory. In some cases, it also supports dynamic scaling based on customer metrics.
Service discovery and Load balancing : Kubernetes groups sets of containers and refers to them via a Domain Name System (DNS). This DNS is also called a Kubernetes service. Kubernetes can discover these services automatically, and load-balance requests between containers of a given service.
Automated rollouts and rollbacks : Kubernetes can roll out and roll back new versions/configurations of an application, without introducing any downtime.
Secrets and configuration management :Kubernetes can manage secrets and configuration details for an application without re-building the respective images. With secrets, we can share confidential information to our application without exposing it to the stack configuration, like on GitHub.
Storage orchestration : With Kubernetes and its plugins, we can automatically mount local, external, and storage solutions to the containers in a seamless manner, based on software-defined storage (SDS).
Batch execution : Besides long running jobs, Kubernetes also supports batch execution.



following projects were part of CNCF:

containerd for container runtime
rkt for container runtime
Kubernetes for container orchestration
Linkerd for service mesh
Envoy for service mesh
gRPC for remote procedure call (RPC)
Container Network Interface (CNI) for networking API
CoreDNS for service discovery
Rook for cloud-native storage
Notary for security
The Update Framework (TUF) for software updates
Prometheus for monitoring
OpenTracing for tracing
Jaeger for distributed tracing
Fluentd for logging
Vitess for storage.



