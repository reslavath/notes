Hi All,

I’ll use this mail thread to update my  status on barman stuff
In this mail, I’m trying to  put design, notes,high level steps for installing and configuring BARMAN.


NOTES :
1.	No need to put extra efforts for streaming the WAL's using pg_receivexlog, barman will take care of this.
2.	And WAL'S in streaming directory are automatically purged.
3.	No need to run extra commands to compress the WAL's in archive directory(incoming). BARMAN will take care of this move the compresses the WALS in "incoming" directory, move to "wals" directory, and finally, purges WAL's in "incoming"  directory
4.	Base backups in the “base” directory are not compressed.   ##will need to find other options.


 


STEPS

1.	Installation
--download the rpms from svn and install the below rpms
#yum install -y barman-cli-1.2-1.rhel7.noarch.rpm barman-2.3-1.rhel7.noarch.rpm python-argh-0.23.0-1.rhel7.noarch.rpm python-argcomplete-0.3.7-1.rhel7.noarch.rpm
2.	authorization from postgres <=> barman
                --generate a new RSA-keypair for postgres and barman user
   # su - barman
   barman@hostname[DEV][~] $ ssh-keygen -t rsa
   postgres@hostname[DEV][~] $ ssh-keygen -t rsa
                --copy the public keys(id_rsa.pub) from postgres <=> barman to  authorized_keys
                barman@hostname[DEV][~] $ pwd
                /var/lib/barman
                barman@hostname[DEV][~] $ cat .ssh/id_rsa.pub
     barman@hostname[DEV][~] touch authorized_keys
     postgres@hostname[DEV][~] touch authorized_keys
                postgres@hostname[DEV][~] $ pwd
                /home/postgres
                postgres@hostname[DEV][~] $ cat .ssh/id_rsa.pub
                --
                postgres@hostname[DEV][~] $ cat .ssh/authorized_keys
     barman@hostname[DEV][~] $ cat .ssh/authorized_keys

3.	configuration
                --change postgreSQL conf
                                --append below lines to postgresql.conf
                                                archive_mode = on
                                                wal_level = 'replica'
                                                max_wal_senders = 4
                                                max_replication_slots = 2
                                                archive_command = 'rsync -a %p barman@hostname:/var/lib/barman/pg/incoming/%f'
                                                --- BARMAN archive directory can be found from the below command
                                                                barman@hostname$ barman show-server pg |grep incoming_wals_directory
                                                max_wal_size = 10GB
                --restart postgresql 
                postgres@hostname[DEV][~] $ /usr/pgsql-10/bin/pg_ctl -D /var/lib/pgsql/10/data/ restart

                --create users in PostgreSQL database instance
                create user barman  with SUPERUSER  ENCRYPTED PASSWORD 'barman' ;
                postgres@hostname[DEV][~] $ createuser -P --replication streaming_barman
                postgres@hostname[DEV][~] $ createuser -s -P barman
                --edit the pg_hba.conf
                host    replication     streaming_barman  00.000.00.000/32      trust
     host replication           barman                 00.000.00.000/32      trust
                
                --create replication slot
                barman@hostname[DEV][~] $ barman receive-wal --create-slot pg
                --edit barman.conf
                barman@hostname[DEV][~] $ cat /etc/barman.conf
     [barman]
     path_prefix = /usr/pgsql-10/bin

     barman_user = barman
     configuration_files_directory = /etc/barman.d
     barman_home = /var/lib/barman
     log_file = /var/log/barman/barman.log
     log_level = INFO
     compression = gzip
     immediate_checkpoint = true
     last_backup_maximum_age = 3 DAYS
     retention_policy = RECOVERY WINDOW OF 7 days
     minimum_redundancy = 3
     archiver = on

     [pg]
     description = "PG Backup"
     conninfo = host=hostname user=barman dbname=postgres
     backup_method = postgres
     streaming_archiver = on
     streaming_conninfo = host=hostname user=streaming_barman dbname=postgres
     slot_name = barman
     path_prefix = /usr/pgsql-10/bin
     archiver = on
     compression = gzip

4.	barman commands( check,backup)          
                --start the streaming WAL archiving
                barman@hostname[DEV][~] $ barman receive-wal pg

                --check command to validate everything is good
                barman@hostname[DEV][~] $ barman check  pg
                                Server pg:
        PostgreSQL: OK
        is_superuser: OK
        PostgreSQL streaming: OK
        wal_level: OK
        replication slot: OK
        directories: OK
        retention policy settings: OK
        backup maximum age: OK (interval provided: 3 days, latest backup age: 2 minutes, 52 seconds)
        compression settings: OK
        failed backups: FAILED (there are 2 failed backups)
        minimum redundancy requirements: OK (have 4 backups, expected at least 3)
        pg_basebackup: OK
        pg_basebackup compatible: OK
        pg_basebackup supports tablespaces mapping: OK
        archive_mode: OK
        archive_command: OK
        continuous archiving: OK
        pg_receivexlog: OK
        pg_receivexlog compatible: OK
        receive-wal running: OK
        archiver errors: OK
                --start the backup with the below command
                barman@hostname[DEV][~] $ barman backup pg
                Starting backup using postgres method for server pg in /var/lib/barman/pg/base/20171006T045850
                Backup start at LSN: 8/750001A8 (000000010000000800000075, 000001A8)
                Starting backup copy via pg_basebackup for 20171006T045850
                Copy done (time: 17 seconds)
                Finalising the backup.
                Backup size: 10.9 GiB
                Backup end at LSN: 8/77000000 (000000010000000800000076, 00000000)
                Backup completed (start time: 2017-10-06 04:58:50.772083, elapsed time: 17 seconds)
                barman@hostname[DEV][~] $
                
                
                
                
                
                
                ssh/rsync
                
    postgres@hostname[DEV][~] $ cat /etc/barman.conf
[barman]


path_prefix = /usr/pgsql-10/bin
backup_method = rsync
reuse_backup = link
archiver_batch_size = 50

barman_user = barman
configuration_files_directory = /etc/barman.d
barman_home = /var/lib/barman

log_file = /var/log/barman/barman.log
log_level = INFO
compression = gzip
immediate_checkpoint = true
#last_backup_maximum_age = 1 DAYS
#retention_policy = RECOVERY WINDOW OF 1 DAYS
#minimum_redundancy = 1
archiver = on

[pg]
description = "PG Backup"
conninfo = host=hostname user=barman dbname=postgres
ssh_command = ssh postgres@hostname -q
backup_method = rsync
reuse_backup = link
streaming_archiver = on
streaming_conninfo = host=hostname user=streaming_barman dbname=postgres
slot_name = barman
path_prefix = /usr/pgsql-10/bin
archiver = on


compression = gzip

