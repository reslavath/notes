backTObasics
https://get.enterprisedb.com/docs/Tutorial_All_PPSS_pgBouncer.pdf
http://blog.aiven.io/2016/12/aiven-postgresql-connection-pooling.html






PGouncer work_log

-- install Pgbouncer
-- create database instances  5434 and 5454
-- create databases(db0_5434,db2_5434) in 5434
-- create databases(db1_5454,db3_5454) in 5454

-- create users
users:(db0_5434_owner,db0_5434_readonly,db0_5434_app,db0_5434_support)
users:(db2_5434_owner,db2_5434_readonly,db2_5434_app,db2_5434_support)



users:(db1_5434_owner,db1_5434_readonly,db1_5434_app,db1_5434_support)
users:(db3_5434_owner,db3_5434_readonly,db3_5434_app,db3_5434_support)

CREATE USERS
--5434
			create user db0_5434_owner with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db0_5434_owner' ;
			create user db0_5434_readonly with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db0_5434_readonly' ;
			create user db0_5434_app with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db0_5434_app' ;
			create user db0_5434_support with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db0_5434_support' ;

			create user db2_5434_owner with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db2_5434_owner' ;
			create user db2_5434_readonly with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db2_5434_readonly' ;
			create user db2_5434_app with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db2_5434_app' ;
			create user db2_5434_support with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db2_5434_support' ;

--5454
			create user db1_5454_owner with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db1_5454_owner' ;
			create user db1_5454_readonly with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db1_5454_readonly' ;
			create user db1_5454_app with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db1_5454_app' ;
			create user db1_5454_support with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db1_5454_support' ;

			create user db3_5454_owner with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db3_5454_owner' ;
			create user db3_5454_readonly with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db3_5454_readonly' ;
			create user db3_5454_app with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db3_5454_app' ;
			create user db3_5454_support with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'db3_5454_support' ;

CREATE DATABASES
--5434
		psql --port=5434 --dbname=postgres -c "CREATE DATABASE db0_5434 OWNER db0_5434_owner;"
		psql --port=5434 --dbname=db0_5434 -c "CREATE SCHEMA db0_5434_owner AUTHORIZATION db0_5434_owner;"
		psql --port=5434 --dbname=postgres -c "CREATE DATABASE db2_5434 OWNER db2_5434_owner;"
		psql --port=5434 --dbname=db2_5434 -c "CREATE SCHEMA db2_5434_owner AUTHORIZATION db2_5434_owner;"

--5454
		psql --port=5454  --dbname=postgres -c "CREATE DATABASE db1_5454 OWNER db1_5454_owner;" --host=localhost
		psql --port=5454  --dbname=db1_5454 -c "CREATE SCHEMA db1_5454_owner AUTHORIZATION db1_5454_owner;" --host=localhost
		psql --port=5454  --dbname=postgres -c "CREATE DATABASE db3_5454 OWNER db3_5454_owner;" --host=localhost
		psql --port=5454  --dbname=db3_5454 -c "CREATE SCHEMA db3_5454_owner AUTHORIZATION db3_5454_owner;" --host=localhost
		
		
Set the search_path for all the above created users

--5434
		psql  --port=5434 --dbname=postgres -c 'ALTER ROLE db0_5434_owner IN DATABASE db0_5434 SET search_path TO db0_5434_owner,"$user",public;'
		psql  --port=5434 --dbname=postgres -c 'ALTER ROLE db0_5434_readonly IN DATABASE db0_5434 SET search_path TO db0_5434_owner,"$user",public;'
		psql  --port=5434 --dbname=postgres -c 'ALTER ROLE db0_5434_app IN DATABASE db0_5434 SET search_path TO db0_5434_owner,"$user",public;'
		psql  --port=5434 --dbname=postgres -c 'ALTER ROLE db0_5434_support IN DATABASE db0_5434 SET search_path TO db0_5434_owner,"$user",public;'

		psql  --port=5434 --dbname=postgres -c 'ALTER ROLE db2_5434_owner IN DATABASE db2_5434 SET search_path TO db2_5434_owner,"$user",public;'
		psql  --port=5434 --dbname=postgres -c 'ALTER ROLE db2_5434_readonly IN DATABASE db2_5434 SET search_path TO db2_5434_owner,"$user",public;'
		psql  --port=5434 --dbname=postgres -c 'ALTER ROLE db2_5434_app IN DATABASE db2_5434 SET search_path TO db2_5434_owner,"$user",public;'
		psql  --port=5434 --dbname=postgres -c 'ALTER ROLE db2_5434_support IN DATABASE db2_5434 SET search_path TO db2_5434_owner,"$user",public;'
--5454
		psql  --port=5454  --dbname=postgres -c 'ALTER ROLE db1_5454_owner IN DATABASE db1_5454 SET search_path TO db1_5454_owner,"$user",public;'
		psql  --port=5454  --dbname=postgres -c 'ALTER ROLE db1_5454_readonly IN DATABASE db1_5454 SET search_path TO db1_5454_owner,"$user",public;'
		psql  --port=5454  --dbname=postgres -c 'ALTER ROLE db1_5454_app IN DATABASE db1_5454 SET search_path TO db1_5454_owner,"$user",public;'
		psql  --port=5454  --dbname=postgres -c 'ALTER ROLE db1_5454_support IN DATABASE db1_5454 SET search_path TO db1_5454_owner,"$user",public;'

		psql  --port=5454  --dbname=postgres -c 'ALTER ROLE db3_5454_owner IN DATABASE db3_5454 SET search_path TO db3_5454_owner,"$user",public;'
		psql  --port=5454  --dbname=postgres -c 'ALTER ROLE db3_5454_readonly IN DATABASE db3_5454 SET search_path TO db3_5454_owner,"$user",public;'
		psql  --port=5454  --dbname=postgres -c 'ALTER ROLE db3_5454_app IN DATABASE db3_5454 SET search_path TO db3_5454_owner,"$user",public;'
		psql  --port=5454  --dbname=postgres -c 'ALTER ROLE db3_5454_support IN DATABASE db3_5454 SET search_path TO db3_5454_owner,"$user",public;'
		
		
For database db0_5434
psql --port=5434 --dbname=db0_5434 --username=db0_5434_owner -w

			#for user  db0_5434_readonly
			GRANT CONNECT ON DATABASE db0_5434 TO db0_5434_readonly;
			GRANT USAGE ON  SCHEMA db0_5434_owner TO db0_5434_readonly;
			GRANT SELECT ON  ALL TABLES IN SCHEMA db0_5434_owner TO db0_5434_readonly;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db0_5434_owner GRANT SELECT ON TABLES TO db0_5434_readonly;

			#for user  db0_5434_app
			GRANT CONNECT ON DATABASE db0_5434  TO db0_5434_app;
			GRANT USAGE ON  SCHEMA db0_5434_owner TO db0_5434_app;
			GRANT SELECT,INSERT,UPDATE,DELETE ON  ALL TABLES IN SCHEMA db0_5434_owner TO db0_5434_app;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db0_5434_owner GRANT SELECT,INSERT,UPDATE,DELETE ON TABLES TO db0_5434_app;

			#for user  db0_5434_support
			GRANT CONNECT ON DATABASE db0_5434  TO db0_5434_support;
			GRANT USAGE ON  SCHEMA db0_5434_owner TO db0_5434_support;
			GRANT SELECT ON  ALL TABLES IN SCHEMA db0_5434_owner TO db0_5434_support;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db0_5434_owner GRANT SELECT ON TABLES TO db0_5434_support;
						
For database db2_5434
psql --port=5434 --dbname=db2_5434 --username=db2_5434_owner -w

			#for user  db2_5434_readonly
			GRANT CONNECT ON DATABASE db2_5434 TO db2_5434_readonly;
			GRANT USAGE ON  SCHEMA db2_5434_owner TO db2_5434_readonly;
			GRANT SELECT ON  ALL TABLES IN SCHEMA db2_5434_owner TO db2_5434_readonly;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db2_5434_owner GRANT SELECT ON TABLES TO db2_5434_readonly;

			#for user  db2_5434_app
			GRANT CONNECT ON DATABASE db2_5434  TO db2_5434_app;
			GRANT USAGE ON  SCHEMA db2_5434_owner TO db2_5434_app;
			GRANT SELECT,INSERT,UPDATE,DELETE ON  ALL TABLES IN SCHEMA db2_5434_owner TO db2_5434_app;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db2_5434_owner GRANT SELECT,INSERT,UPDATE,DELETE ON TABLES TO db2_5434_app;

			#for user  db2_5434_support
			GRANT CONNECT ON DATABASE db2_5434  TO db2_5434_support;
			GRANT USAGE ON  SCHEMA db2_5434_owner TO db2_5434_support;
			GRANT SELECT ON  ALL TABLES IN SCHEMA db2_5434_owner TO db2_5434_support;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db2_5434_owner GRANT SELECT ON TABLES TO db2_5434_support;

For database db1_5454
			psql --port=5454 --dbname=db1_5454 --username=db1_5454_owner -w

			#for user  db1_5454_readonly
			GRANT CONNECT ON DATABASE db1_5454 TO db1_5454_readonly;
			GRANT USAGE ON  SCHEMA db1_5454_owner TO db1_5454_readonly;
			GRANT SELECT ON  ALL TABLES IN SCHEMA db1_5454_owner TO db1_5454_readonly;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db1_5454_owner GRANT SELECT ON TABLES TO db1_5454_readonly;

			#for user  db1_5454_app
			GRANT CONNECT ON DATABASE db1_5454  TO db1_5454_app;
			GRANT USAGE ON  SCHEMA db1_5454_owner TO db1_5454_app;
			GRANT SELECT,INSERT,UPDATE,DELETE ON  ALL TABLES IN SCHEMA db1_5454_owner TO db1_5454_app;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db1_5454_owner GRANT SELECT,INSERT,UPDATE,DELETE ON TABLES TO db1_5454_app;

			#for user  db1_5454_support
			GRANT CONNECT ON DATABASE db1_5454  TO db1_5454_support;
			GRANT USAGE ON  SCHEMA db1_5454_owner TO db1_5454_support;
			GRANT SELECT ON  ALL TABLES IN SCHEMA db1_5454_owner TO db1_5454_support;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db1_5454_owner GRANT SELECT ON TABLES TO db1_5454_support;

For database db3_5454
			psql --port=5454 --dbname=db3_5454 --username=db3_5454_owner -w

			#for user  db3_5454_readonly
			GRANT CONNECT ON DATABASE db3_5454 TO db3_5454_readonly;
			GRANT USAGE ON  SCHEMA db3_5454_owner TO db3_5454_readonly;
			GRANT SELECT ON  ALL TABLES IN SCHEMA db3_5454_owner TO db3_5454_readonly;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db3_5454_owner GRANT SELECT ON TABLES TO db3_5454_readonly;

			#for user  db3_5454_app
			GRANT CONNECT ON DATABASE db3_5454  TO db3_5454_app;
			GRANT USAGE ON  SCHEMA db3_5454_owner TO db3_5454_app;
			GRANT SELECT,INSERT,UPDATE,DELETE ON  ALL TABLES IN SCHEMA db3_5454_owner TO db3_5454_app;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db3_5454_owner GRANT SELECT,INSERT,UPDATE,DELETE ON TABLES TO db3_5454_app;

			#for user  db3_5454_support
			GRANT CONNECT ON DATABASE db3_5454  TO db3_5454_support;
			GRANT USAGE ON  SCHEMA db3_5454_owner TO db3_5454_support;
			GRANT SELECT ON  ALL TABLES IN SCHEMA db3_5454_owner TO db3_5454_support;
			ALTER DEFAULT PRIVILEGES IN SCHEMA db3_5454_owner GRANT SELECT ON TABLES TO db3_5454_support;

			
			
Load data into the databases.
			/usr/pgsql-9.5/bin/pgbench -i -s 70 db0_5434 --port=5434 --username=db0_5434_owner
			/usr/pgsql-9.5/bin/pgbench -i -s 70 db2_5434 --port=5434 --username=db2_5434_owner
			/usr/pgsql-9.5/bin/pgbench -i -s 70 db1_5454 --port=5454 --username=db1_5454_owner
			/usr/pgsql-9.5/bin/pgbench -i -s 70 db3_5454 --port=5454 --username=db3_5454_owner
			
			
PgBouncer Configs in database server
revoke all on schema public from public;
create user pgbouncer with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'pgbouncer' ;
CREATE SCHEMA pgbouncer AUTHORIZATION pgbouncer;
GRANT SELECT ON pg_catalog.pg_shadow TO pgbouncer;

\i /tmp/pgbouncer_authquery.sql
				postgres=# \! cat  /tmp/pgbouncer_authquery.sql
			CREATE SCHEMA pgbouncer AUTHORIZATION pgbouncer;
			CREATE OR REPLACE FUNCTION pgbouncer.user_lookup(in i_username text, out uname text, out phash text)
			RETURNS record AS $$
			BEGIN
				SELECT usename, passwd FROM pg_catalog.pg_shadow
				WHERE usename = i_username INTO uname, phash;
				RETURN;
			END;
			$$ LANGUAGE plpgsql SECURITY DEFINER;

			REVOKE ALL ON FUNCTION pgbouncer.user_lookup(text) FROM public, pgbouncer;
			GRANT EXECUTE ON FUNCTION pgbouncer.user_lookup(text) TO pgbouncer;
			GRANT SELECT ON pg_catalog.pg_shadow TO pgbouncer;

Add the databases in Pgbouncer.ini and restart pgbouncer service.
db2_5434 = host=192.168.107.240 dbname=db2_5434  port=5434 auth_user=pgbouncer

db1_5454 = host=192.168.107.240 dbname=db1_5454  port=5454 auth_user=pgbouncer
db3_5454 = host=192.168.107.240 dbname=db3_5454  port=5454 auth_user=pgbouncer





PgBouncer is a lightweight connection pooler. When a user connects to PgBouncer, the user’s username and password is checked against userlist.txt file. 

Disadvantage of userlist.txt
		The disadvantage is whenever new user is added to PostgreSQL, the user’s username and password has to be added to userlist.txt. 
		Password is the actual plain-text password or plain-text md5 hash.

Authenticate to PostgreSQL instead of looking for credentials in userlist.txt

		There is a way to configure PgBouncer so that username and password are authenticated against PostgreSQL without completely relying on userlist.txt. There is still a limited need for userlist.txt. The general idea is to:

		Create a user called pgbouncer in PostgreSQL
		Enter pgbouncer user and password in userlist.txt
		PgBouncer can use this credential to ask PostgreSQL whether the user/password connecting to PgBouncer is actually present in PostgreSQL
		
Here’s how a user matt will authenticate

		User matt logs into PgBouncer with his username
		PgBouncer goes to userlist.txt and collects pgbouncer credentials and uses them to ask PostgreSQL whether matt’s credentials are OK
		If OK, PgBouncer connects matt to PostgreSQL
		If not, PgBouncer does NOT connect matt to PostgreSQL
			
			
					
			
			
			
new setup 
  psql --host=hostname506  --port=5434 --username=db0_5434_owner --dbname=db0_5434 -W
   app server ::: hostname090
   PgBouncer ::: hostname030
   database servers :::  hostname506:5434 hostname506:5454
			
			
			
			
postgres = host=192.168.107.240 dbname=postgres auth_user=pgbouncer
db0_5434 = host=192.168.107.240 dbname=db0_5434  user=db0_5434_readonly port=5434 auth_user=pgbouncer


psql --host=192.168.36.111  --port=6432 --username=db0_5434_readonly --dbname=db0_5434 -W
psql --host=192.168.107.240  --port=5434 --username=pgbouncer --dbname=postgres -W

	
create user pgbouncer with NOSUPERUSER NOCREATEDB NOCREATEROLE  NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS  ENCRYPTED PASSWORD 'pgbouncer' ;

db0_5434_app     
db0_5434_owner   
db0_5434_readonly
db0_5434_support 
db2_5434_app     
db2_5434_owner   
db2_5434_readonly
db2_5434_support 

psql --host=192.168.36.111  --port=6432 --username=db0_5434_readonly --dbname=db0_5434
psql --host=192.168.36.111  --port=6432 --username=db0_5434_app --dbname=db0_5434
psql --host=192.168.36.111  --port=6432 --username=db0_5434_app --dbname=db0_5434




psql --host=hostname506 --port=5434 --username="pgbouncer" --dbname=db0_5434




REVOKE ALL ON FUNCTION public.user_lookup(text) FROM public, pgbouncer;
GRANT EXECUTE ON FUNCTION public.user_lookup(text) TO pgbouncer;

revoke all on schema public from public;

			
CREATE OR REPLACE FUNCTION pgbouncer.user_lookup(in i_username text, out uname text, out phash text)
RETURNS record AS $$
BEGIN
    SELECT usename, passwd FROM pg_catalog.pg_shadow
    WHERE usename = i_username INTO uname, phash;
    RETURN;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

REVOKE ALL ON FUNCTION pgbouncer.user_lookup(text) FROM public, pgbouncer;
GRANT SELECT ON TABLE pg_shadow IN SCHEMA pg_catalog TO pgbouncer

GRANT EXECUTE ON FUNCTION pgbouncer.user_lookup(text) TO pgbouncer;


			
Check Commands
psql --port=6432 --username=db1_5454_owner  --dbname=db1_5454  --host=hostname030
psql --port=6432 --username=db0_5434_owner  --dbname=db0_5434  --host=hostname030
psql --port=6432 --username=db2_5434_owner  --dbname=db2_5434  --host=hostname030
psql --port=6432 --username=db1_5454_owner  --dbname=db1_5454  --host=hostname030
psql --port=6432 --username=db3_5454_owner  --dbname=db3_5454  --host=hostname030

			
			
			
			
			# TYPE  DATABASE        USER            ADDRESS                 METHOD

local   all             all                                     trust
host    all             all             127.0.0.1/32            trust
host    all             all             ::1/128                 trust
host    all             all             192.168.36.111/32        trust






Customer Scenario		
		
S.No	Scenarios 	Proposal
1	multi-tenant (SaaS) Offering 	
2	User base growing from thousands to millions	
3	Customers to have confidence secure,safe and allways available 	
4	3-tier stack	
5	Experimenting with PostgreSQL, migrating away from Oracle.	we can propose migarting stratergy from Oracle to PostgreSQL for existing database in UK.
6	5 requests per second, 10 rps or maybe 100 rps	
7	SA's and Dev's currently use Microsoft Active Directory(AD) accounts  to single sign-on to their infrastructure 	
8	Customer's usernames and hashed passwords stored in Oracle database	
9	secure system that allows it to enforce policies and other governance rules	
10	data is backed up to tape and sent off site regularly 	AWS-S3 move to S3 Glacier
11	want to improve backup and restore capabilities	
12	Lacks a robust Disaster Recovery solution 	
13	wants to consider an active-active solution 	
		
Concerned		
		
S.No	Concerned 	How they are addressed 
1	It takes long time to restore the system in the event of disruption, or disaster	
2	High TCO due to increasing cost of licensing  relevant Oracle Databases	
3	Modernizing the data layer of their Accounting software to control cost,improve performance and accelerate new feature releases	start with per customer one database
4	scaling with demand where they potentially grow to support millions of user with transaction rates above 500 per second	
5	Provision for Disaster Recovery and archival stratergy for inactive objects greater than 6 months 	Archival stratergy is ready with DMS + S3 + S3 Glacier
6	Effective distribution of load with self healing infra that recovers from failed service instances, preferbaly active-active configuration that does not require manual intervention	
7	security of data at rest and in transit	
8	secure access to the environment of their customers and data	
		
		
Objective 		
		
Cost effective, manageable,secure,scalable,high performance,efficient, highly avaialble, fault tolerant and recoverable architecture		
















